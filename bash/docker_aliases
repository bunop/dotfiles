#!/bin/sh

# for more info, visit:
# https://medium.com/@cjus/handy-docker-aliases-4bd85089a3b8

alias dm='docker-machine'
alias dmx='docker-machine ssh'
alias dk='docker'
alias dki='docker images'
alias dks='docker service'
alias dkrm='docker rm'
alias dkl='docker logs'
alias dklf='docker logs -f'
alias dkflush='docker rm `docker ps --no-trunc -aq`'
alias dkflush2='docker rmi $(docker images --filter "dangling=true" -q --no-trunc)'
alias dkt='docker stats --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}"'
alias dkps="docker ps --format '{{.ID}} ~ {{.Names}} ~ {{.Status}} ~ {{.Image}}'"

## Useful alias for docker:
# http://nathanleclaire.com/blog/2014/07/12/10-docker-tips-and-tricks-that-will-make-you-sing-a-whale-song-of-joy/
# adapted in order to have always dk for docker commands
# alias drm="docker rm"
# alias dps="docker ps"
alias dkpsa="docker ps -a"
alias dkpse="docker ps -a | awk 'BEGIN { FS = \"[ ][ ]+\" } {if (\$5 ~ /^Exited/) {print \$0}}'"
alias dkpseid="dpse | cut -f1 --delim=\" \""

# when docker compose plugin is installed
alias docker-compose="docker compose"

# una function per attivare un docker e attaccarsi
function dka () {
    docker start $1 && docker attach $1
}

# Dump della network di docker
function dkgetnetwork() {
    docker inspect -f '{{ json .NetworkSettings }}' $1 | python -mjson.tool
}

# dump dell'ip address del container docker
function dkgetipaddress() {
    docker inspect --format="{{.NetworkSettings.IPAddress}}" $1
}

# getta i volumi (updated 1.8.1)
# http://stackoverflow.com/questions/30133664/how-do-you-list-volumes-in-docker-containers
function dkgetvolumes() {
    ddocker inspect -f '{{ (index .Mounts 0).Source }}' $1
}

# ripulisce i container stopped e le immagini non utilizzate
# http://stackoverflow.com/questions/32723111/how-to-remove-old-and-unused-docker-images
# dkcleanup(){
#     docker rm -v $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
#     docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null
# }

dkln() {
  docker logs -f `docker ps | grep $1 | awk '{print $1}'`
}

dkp() {
  if [ ! -f .dockerignore ]; then
    echo "Warning, .dockerignore file is missing."
    read -p "Proceed anyway?"
  fi

  if [ ! -f package.json ]; then
    echo "Warning, package.json file is missing."
    read -p "Are you in the right directory?"
  fi

  VERSION=`cat package.json | jq .version | sed 's/\"//g'`
  NAME=`cat package.json | jq .name | sed 's/\"//g'`
  LABEL="$1/$NAME:$VERSION"

  docker build --build-arg NPM_TOKEN=${NPM_TOKEN} -t $LABEL .

  read -p "Press enter to publish"
  docker push $LABEL
}

dkpnc() {
  if [ ! -f .dockerignore ]; then
    echo "Warning, .dockerignore file is missing."
    read -p "Proceed anyway?"
  fi

  if [ ! -f package.json ]; then
    echo "Warning, package.json file is missing."
    read -p "Are you in the right directory?"
  fi

  VERSION=`cat package.json | jq .version | sed 's/\"//g'`
  NAME=`cat package.json | jq .name | sed 's/\"//g'`
  LABEL="$1/$NAME:$VERSION"

  docker build --build-arg NPM_TOKEN=${NPM_TOKEN} --no-cache=true -t $LABEL .
  read -p "Press enter to publish"
  docker push $LABEL
}

dkpl() {
  if [ ! -f .dockerignore ]; then
    echo "Warning, .dockerignore file is missing."
    read -p "Proceed anyway?"
  fi

  if [ ! -f package.json ]; then
    echo "Warning, package.json file is missing."
    read -p "Are you in the right directory?"
  fi

  VERSION=`cat package.json | jq .version | sed 's/\"//g'`
  NAME=`cat package.json | jq .name | sed 's/\"//g'`
  LATEST="$1/$NAME:latest"

  docker build --build-arg NPM_TOKEN=${NPM_TOKEN} --no-cache=true -t $LATEST .
  read -p "Press enter to publish"
  docker push $LATEST
}

dkclean() {
  docker rm -v $(docker ps --filter status=exited -q 2>/dev/null) 2>/dev/null
  docker volume rm $(docker volume ls -qf dangling=true 2>/dev/null) 2>/dev/null
  docker rmi $(docker images --filter dangling=true -q 2>/dev/null) 2>/dev/null
}

dkprune() {
  docker system prune -af
}

dktop() {
  docker stats --format "table {{.Container}}\t{{.Name}}\t{{.CPUPerc}}  {{.MemPerc}}\t{{.NetIO}}\t{{.BlockIO}}"
}

dkstats() {
  if [ $# -eq 0 ]
    then docker stats --no-stream;
    else docker stats --no-stream | grep $1;
  fi
}

dke() {
  docker exec -it $1 /bin/sh
}

dkexe() {
  docker exec -it $1 $2
}

dkreboot() {
  osascript -e 'quit app "Docker"'
  countdown 2
  open -a Docker
  echo "Restarting Docker engine"
  countdown 120
}

dkstate() {
  docker inspect $1 | jq .[0].State
}

dksb() {
  docker service scale $1=0
  sleep 2
  docker service scale $1=$2
}

# mongo() {
#   mongoLabel=`docker ps | grep mongo | awk '{print $NF}'`
#   docker exec -it $mongoLabel mongo "$@"
# }
#
# redis() {
#   redisLabel=`docker ps | grep redis | awk '{print $NF}'`
#   docker exec -it $redisLabel redis-cli
# }

# https://forums.docker.com/t/how-can-i-list-tags-for-a-repository/32577/7
function listTags() {
  local repo=${1}
  local size=${2:-25}
  local page=${3:-1}
  [ -z "${repo}" ] && echo "Usage: listTags <repoName> [size] [pageIndex]" 1>&2 && return 1
  curl "https://registry.hub.docker.com/api/content/v1/repositories/public/library/${repo}/tags?page=${page}&page_size=${size}" 2>/dev/null | jq -r '.results[].name' | sort
}

function dksearchtags() {
  local repo=${1}
  local count=$(curl "https://registry.hub.docker.com/api/content/v1/repositories/public/library/${repo}/tags" 2>/dev/null | jq -r '.count')
  local size=25
  let totPages=${count}/${size}
  let reminder=${count}%${size}
  if (( reminder > 0 )); then
    ((totPages+=1))
  fi
  #echo ${count} ${size} ${totPages} ${reminder}
  for page in $(seq 1 ${totPages}); do
    listTags ${repo} ${size} ${page}
  done
}
